
package com.demo.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.File;
import java.text.SimpleDateFormat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.constraints.NotNull;
import java.util.*;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.transaction.annotation.Transactional;


import org.hibernate.exception.ConstraintViolationException;

import org.springframework.dao.EmptyResultDataAccessException;
import javax.persistence.NoResultException;


import org.apache.cxf.jaxrs.ext.search.SearchContext;

import com.demo.dao.ICandidateDao;
import com.demo.model.Candidate;
import com.demo.model.Roles;
import com.demo.service.ICandidateService;

import javax.validation.Valid;


/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 * Service 
 *
 */
 
@Service
@Transactional
public class CandidateServiceImpl  implements ICandidateService {
 private Logger logger=LoggerFactory.getLogger(CandidateServiceImpl.class);
  
 
 @Autowired
 private ICandidateDao candidateDao;
	
			/**
	 * 
	 *Returns the list of Candidate using entity
	 *@parameter Candidate to search record
	 *@returns a Tag record
	 * 
	 */
	@Override
	public List<Candidate> search(Candidate candidate) {
	logger.info("Finding record by Candidate name :"+candidate);
		try
		{
			return null;
			
			//return candidateDao.(candidate);
		}catch(Exception ex)
		{
			logger.error("Error  occurred  @class"   + this.getClass().getName()  , ex);
			return null;	
		}finally{
			logger.info("Inside @class:"+this.getClass().getName()+" @method :search with Finally Block 1");
		}
	}

	/**
	 * 
	 *Returns the Candidate finding by id
	 *@parameter primaryKey to find Candidate
	 *@
	 *@throws CandidateNotFoundException
	 *@returns a Candidate record
	 * 
	 */
	/*@Override
	public Candidate findById(@NotNull Integer primaryKey){
		logger.info("Finding record by primaryKey :"+primaryKey);
		try{
		return (super.findById(primaryKey));
		}
		catch(EmptyResultDataAccessException ex)
		{
		   logger.error("Error Inside  @class :"+this.getClass().getName()+" @Method :findById()"+ex.getMessage());
		
			return null;
		}catch(NoResultException ex)
		{
		   logger.error("Error Inside  @class :"+this.getClass().getName()+" @Method :findById()"+ex.getMessage());
		
			return null;
		}catch(Exception ex)
		{
			logger.error("Error  occurred  @class"   + this.getClass().getName()+" @Method :findById()"  , ex);
			return null;	
		}finally{
			logger.info("Inside @class:"+this.getClass().getName()+" @method :findById with Finally Block 1");
		}
	}*/

	/**
	 * 
	 *Returns the list of Candidate 
	 *@
	 *@throws CandidateNotFoundException
	 *@returns a list of Candidate record
	 * 
	 */
	/*@Override
	public List<Candidate> findAll() {
		try{
			return super.findAll();

		}
		catch(EmptyResultDataAccessException ex)
		{	
		    logger.error("Error Inside  @class :"+this.getClass().getName()+" @Method :findAll()"+ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		    logger.error("Error Inside  @class :"+this.getClass().getName()+" @Method :findAll()"+ex.getMessage());
			throw new BusinessException(ex);
		}catch (Exception e) {
			logger.error("Error  occurred  @class"   + this.getClass().getName()  , e);
			throw new BusinessException(ExceptionUtil.generateExceptionCode("Service","Candidate",e));
		}finally{
			logger.info("Inside @class:"+this.getClass().getName()+" @method :findAll with Finally Block 1");
		}
	}
*/
	/**
	 * 
	 *Returns the new valid Candidate record
	 *@parameter Candidate to create new record
	 *@returns a new Candidate record
	 *@ 
	 *@throws CandidateAlreadyExistException 
	 *@throws ValidationFailedException		
	 */
	@Override
	public Candidate create(@Valid Candidate candidate) {
    logger.info("Create record by tag : "+candidate);
		try{	
					
			candidate=candidateDao.create(candidate);
	        return candidate;
    	
    	}catch(Exception ex)
    	{
    		logger.error("Error Inside  @class :"+this.getClass().getName()+" @Method :create()"+ex.getMessage());	
    		return null;
    	}finally{
			logger.info("Inside @class:"+this.getClass().getName()+" @method :create with Finally Block 1");
		}
	}

	/**
	 * 
	 *Returns the updated valid Candidate record
	 *@parameter Candidate to update Candidate record
	 * @	
 	 
	 *@returns a updated Candidate record
	 * 
	 */
	@Override
	public Candidate update(@Valid Candidate candidate) {
	logger.info("Update record of Candidate of Id : "+candidate.getId());	
		try{
				return candidateDao.update(candidate);
			}catch(Exception ex)
		{
			logger.error("Error  occurred  @class"   + this.getClass().getName()+" @Method :update()" , ex);
			return null;	
		}finally{
			logger.info("Inside @class:"+this.getClass().getName()+" @method :update with Finally Block 1");
		}
	}

	
	

  public Long getTotalCount(){
				return candidateDao.getTotalCount();
	}

@Override
public Integer getSearchRecordCount(SearchContext context) {
	// TODO Auto-generated method stub
	return null;
}

@Override
public List<Candidate> search(SearchContext context, Integer upperLimit,
		Integer lowerLimit, String orderBy, String orderType) {
	logger.info("Inside CandidateServiceImpl @Method: search @Param : context:"+context+" upperLimit:"+upperLimit+" lowerLimit:"+lowerLimit+" orderBy:"+orderBy+" orderType: "+orderType);
	try{
		return candidateDao.search(context, lowerLimit, upperLimit, orderBy, orderType);
	}catch(Exception ex){
		  ex.printStackTrace();
		  return null;
	}
	
}

	/*@Override
	public Integer getSearchRecordCount(SearchContext context)
			 {
		logger.info(this.getClass().getName()+" @method getSearchRecordCount");
		try{
				int userId = CustomerInfo.getUserInContext().getUserid();
				Set<Roles> roleSet = CustomerInfo.getRolesInContext();
				Integer result= candidateDao.getSearchRecordCount(context, userId, roleSet);
				return result;
			}
			catch(Exception ex)
			{
				logger.error("Error  occurred  @class"   + this.getClass().getName()  , ex);
				return null;	
			}finally{
				logger.info("Inside @class:"+this.getClass().getName()+" @method :getSearchRecordCount with Finally Block 1");
			}
	}*/
}
